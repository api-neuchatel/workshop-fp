{
  "{\"sourceRoot\":\"/home/arnaudgeiser/git/workshop-fp/code/partie2\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/home/arnaudgeiser/git/workshop-fp/code/partie2\",\"filename\":\"/home/arnaudgeiser/git/workshop-fp/code/partie2/test.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/home/arnaudgeiser/git/workshop-fp/code/partie2\",\"plugins\":[],\"presets\":[]}:7.4.4": {
    "metadata": {},
    "options": {
      "sourceRoot": "/home/arnaudgeiser/git/workshop-fp/code/partie2",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/home/arnaudgeiser/git/workshop-fp/code/partie2",
      "filename": "/home/arnaudgeiser/git/workshop-fp/code/partie2/test.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/home/arnaudgeiser/git/workshop-fp/code/partie2",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/home/arnaudgeiser/git/workshop-fp/code/partie2/test.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "/home/arnaudgeiser/git/workshop-fp/code/partie2/test.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/home/arnaudgeiser/git/workshop-fp/code/partie2",
        "sourceFileName": "test.js"
      }
    },
    "ast": null,
    "code": "import partie2 from './partie2';\n\nconst chai = require('chai');\n\nchai.should();\ndescribe('Array', function () {\n  describe('#indexOf()', function () {\n    it('should return -1 when the value is not present', function () {\n      [1, 2, 3].should.contains(2);\n    });\n  });\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QuanMiXSwibmFtZXMiOlsicGFydGllMiIsImNoYWkiLCJyZXF1aXJlIiwic2hvdWxkIiwiZGVzY3JpYmUiLCJpdCIsImNvbnRhaW5zIl0sIm1hcHBpbmdzIjoiQUFBQSxPQUFPQSxPQUFQLE1BQW9CLFdBQXBCOztBQUVBLE1BQU1DLElBQUksR0FBR0MsT0FBTyxDQUFDLE1BQUQsQ0FBcEI7O0FBRUFELElBQUksQ0FBQ0UsTUFBTDtBQUVBQyxRQUFRLENBQUMsT0FBRCxFQUFVLFlBQVc7QUFDM0JBLEVBQUFBLFFBQVEsQ0FBQyxZQUFELEVBQWUsWUFBVztBQUNoQ0MsSUFBQUEsRUFBRSxDQUFDLGdEQUFELEVBQW1ELFlBQVc7QUFDOUQsT0FBQyxDQUFELEVBQUksQ0FBSixFQUFPLENBQVAsRUFBVUYsTUFBVixDQUFpQkcsUUFBakIsQ0FBMEIsQ0FBMUI7QUFDRCxLQUZDLENBQUY7QUFHRCxHQUpPLENBQVI7QUFLRCxDQU5PLENBQVIiLCJzb3VyY2VSb290IjoiL2hvbWUvYXJuYXVkZ2Vpc2VyL2dpdC93b3Jrc2hvcC1mcC9jb2RlL3BhcnRpZTIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgcGFydGllMiBmcm9tICcuL3BhcnRpZTInO1xuXG5jb25zdCBjaGFpID0gcmVxdWlyZSgnY2hhaScpO1xuXG5jaGFpLnNob3VsZCgpO1xuXG5kZXNjcmliZSgnQXJyYXknLCBmdW5jdGlvbigpIHtcbiAgZGVzY3JpYmUoJyNpbmRleE9mKCknLCBmdW5jdGlvbigpIHtcbiAgICBpdCgnc2hvdWxkIHJldHVybiAtMSB3aGVuIHRoZSB2YWx1ZSBpcyBub3QgcHJlc2VudCcsIGZ1bmN0aW9uKCkge1xuICAgICAgWzEsIDIsIDNdLnNob3VsZC5jb250YWlucygyKTtcbiAgICB9KTtcbiAgfSk7XG59KTsiXX0=",
    "map": {
      "version": 3,
      "sources": [
        "test.js"
      ],
      "names": [
        "partie2",
        "chai",
        "require",
        "should",
        "describe",
        "it",
        "contains"
      ],
      "mappings": "AAAA,OAAOA,OAAP,MAAoB,WAApB;;AAEA,MAAMC,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AAEAD,IAAI,CAACE,MAAL;AAEAC,QAAQ,CAAC,OAAD,EAAU,YAAW;AAC3BA,EAAAA,QAAQ,CAAC,YAAD,EAAe,YAAW;AAChCC,IAAAA,EAAE,CAAC,gDAAD,EAAmD,YAAW;AAC9D,OAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAUF,MAAV,CAAiBG,QAAjB,CAA0B,CAA1B;AACD,KAFC,CAAF;AAGD,GAJO,CAAR;AAKD,CANO,CAAR",
      "sourceRoot": "/home/arnaudgeiser/git/workshop-fp/code/partie2",
      "sourcesContent": [
        "import partie2 from './partie2';\n\nconst chai = require('chai');\n\nchai.should();\n\ndescribe('Array', function() {\n  describe('#indexOf()', function() {\n    it('should return -1 when the value is not present', function() {\n      [1, 2, 3].should.contains(2);\n    });\n  });\n});"
      ]
    },
    "sourceType": "module",
    "mtime": 1558456457947
  },
  "{\"sourceRoot\":\"/home/arnaudgeiser/git/workshop-fp/code/partie2\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/home/arnaudgeiser/git/workshop-fp/code/partie2\",\"filename\":\"/home/arnaudgeiser/git/workshop-fp/code/partie2/test.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/home/arnaudgeiser/git/workshop-fp/code/partie2\",\"plugins\":[{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ObjectMethod\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]},\"ClassMethod\":{\"exit\":[null]},\"ClassPrivateMethod\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.4.4": {
    "metadata": {},
    "options": {
      "sourceRoot": "/home/arnaudgeiser/git/workshop-fp/code/partie2",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/home/arnaudgeiser/git/workshop-fp/code/partie2",
      "filename": "/home/arnaudgeiser/git/workshop-fp/code/partie2/test.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/home/arnaudgeiser/git/workshop-fp/code/partie2",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectMethod": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/home/arnaudgeiser/git/workshop-fp/code/partie2/test.js",
        "plugins": [
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "/home/arnaudgeiser/git/workshop-fp/code/partie2/test.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/home/arnaudgeiser/git/workshop-fp/code/partie2",
        "sourceFileName": "test.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nvar _ex = require(\"./ex1\");\n\nvar _ex2 = require(\"./ex2\");\n\nvar chai = require('chai');\n\nvar should = chai.should();\ndescribe('First-class functions', function () {\n  it('1. I can store a function in a variable', function () {\n    should.not.equal(_ex[\"double\"], null, \"double ne doit pas être null\");\n    (0, _ex[\"double\"])(2).should.equal(4);\n  });\n  it('2. I can pass a function to another function as parameter', function () {\n    (0, _ex.doubleArray)([1, 2, 4], function (x) {\n      return x * 2;\n    }).should.deep.equal([2, 4, 8]);\n  });\n});\ndescribe('Higher-order functions', function () {\n  it('1. I can create a function from a function', function () {\n    should.not.equal(_ex.add5, null, \"add5 ne doit pas être null\");\n    (0, _ex.add5)(2).should.equal(7);\n  });\n});\ndescribe('Movies et peoples', function () {\n  it('1. I can pass an array and a function to apply a transformation via the map() function', function () {\n    (0, _ex2.map)([1, 2, 3, 4], function (e) {\n      return e * 2;\n    }).should.deep.equal([2, 4, 6, 8]);\n  });\n  it('2. I can pass an array and a predicate to filter out items via the filter() function', function () {\n    (0, _ex2.filter)([1, 2, 3, 4], function (e) {\n      return e % 2 == 0;\n    }).should.deep.equal([2, 4]);\n  });\n  it('3. I can create a function that close over a variable in its environnement, that\\' called a closure!', function () {\n    should.not.equal((0, _ex2.findPersonById)(1), null, \"Not implemented\");\n    (0, _ex2.findPersonById)(1).name.should.equal(\"Arnaud\");\n  });\n  it('4. I can get people younger than 30', function () {\n    (0, _ex2.peopleYoungerThan30)().length.should.equal(2);\n  });\n  it('5. I can get two letters acronyms', function () {\n    (0, _ex2.peopleAcronyms)().every(function (e) {\n      e.length.should.equal(2);\n    });\n  });\n  it('6. I can get two letters acronyms in uppercase that starts with D', function () {\n    (0, _ex2.peopleAcronymsUppercaseStartWithD)().length.should.equal(2);\n    (0, _ex2.peopleAcronymsUppercaseStartWithD)().every(function (e) {\n      e.should.match(/^D[A-Z]$/);\n    });\n  });\n  it('7. I can get all comments for each movie and people', function () {\n    (0, _ex2.commentsByMovie)().forEach(function (c) {\n      return c.should.have.all.keys('name', 'grade', 'movie');\n    });\n    (0, _ex2.commentsByMovie)().length.should.equal(8);\n  });\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QuanMiXSwibmFtZXMiOlsiY2hhaSIsInJlcXVpcmUiLCJzaG91bGQiLCJkZXNjcmliZSIsIml0Iiwibm90IiwiZXF1YWwiLCJkb3VibGUiLCJ4IiwiZGVlcCIsImFkZDUiLCJlIiwibmFtZSIsImxlbmd0aCIsImV2ZXJ5IiwibWF0Y2giLCJmb3JFYWNoIiwiYyIsImhhdmUiLCJhbGwiLCJrZXlzIl0sIm1hcHBpbmdzIjoiOztBQUFBOztBQU1BOztBQVVBLElBQU1BLElBQUksR0FBR0MsT0FBTyxDQUFDLE1BQUQsQ0FBcEI7O0FBQ0EsSUFBTUMsTUFBTSxHQUFHRixJQUFJLENBQUNFLE1BQUwsRUFBZjtBQUVBQyxRQUFRLENBQUMsdUJBQUQsRUFBMEIsWUFBVztBQUMzQ0MsRUFBQUEsRUFBRSxDQUFDLHlDQUFELEVBQTRDLFlBQVc7QUFDdkRGLElBQUFBLE1BQU0sQ0FBQ0csR0FBUCxDQUFXQyxLQUFYLENBQWlCQyxhQUFqQixFQUF5QixJQUF6QixFQUErQiw4QkFBL0I7QUFDQSx1QkFBTyxDQUFQLEVBQVVMLE1BQVYsQ0FBaUJJLEtBQWpCLENBQXVCLENBQXZCO0FBQ0QsR0FIQyxDQUFGO0FBSUFGLEVBQUFBLEVBQUUsQ0FBQywyREFBRCxFQUE4RCxZQUFXO0FBQ3pFLHlCQUFZLENBQUMsQ0FBRCxFQUFHLENBQUgsRUFBSyxDQUFMLENBQVosRUFBcUIsVUFBQ0ksQ0FBRDtBQUFBLGFBQU9BLENBQUMsR0FBRyxDQUFYO0FBQUEsS0FBckIsRUFBbUNOLE1BQW5DLENBQTBDTyxJQUExQyxDQUErQ0gsS0FBL0MsQ0FBcUQsQ0FBQyxDQUFELEVBQUcsQ0FBSCxFQUFLLENBQUwsQ0FBckQ7QUFDRCxHQUZDLENBQUY7QUFHRCxDQVJPLENBQVI7QUFVQUgsUUFBUSxDQUFDLHdCQUFELEVBQTJCLFlBQVc7QUFDNUNDLEVBQUFBLEVBQUUsQ0FBQyw0Q0FBRCxFQUErQyxZQUFXO0FBQzFERixJQUFBQSxNQUFNLENBQUNHLEdBQVAsQ0FBV0MsS0FBWCxDQUFpQkksUUFBakIsRUFBdUIsSUFBdkIsRUFBNkIsNEJBQTdCO0FBQ0Esa0JBQUssQ0FBTCxFQUFRUixNQUFSLENBQWVJLEtBQWYsQ0FBcUIsQ0FBckI7QUFDRCxHQUhDLENBQUY7QUFJRCxDQUxPLENBQVI7QUFPQUgsUUFBUSxDQUFDLG1CQUFELEVBQXNCLFlBQVc7QUFDdkNDLEVBQUFBLEVBQUUsQ0FBQyx3RkFBRCxFQUEyRixZQUFXO0FBQ3RHLGtCQUFJLENBQUMsQ0FBRCxFQUFHLENBQUgsRUFBSyxDQUFMLEVBQU8sQ0FBUCxDQUFKLEVBQWUsVUFBQU8sQ0FBQztBQUFBLGFBQUlBLENBQUMsR0FBRyxDQUFSO0FBQUEsS0FBaEIsRUFBMkJULE1BQTNCLENBQWtDTyxJQUFsQyxDQUF1Q0gsS0FBdkMsQ0FBNkMsQ0FBQyxDQUFELEVBQUcsQ0FBSCxFQUFLLENBQUwsRUFBTyxDQUFQLENBQTdDO0FBQ0QsR0FGQyxDQUFGO0FBR0FGLEVBQUFBLEVBQUUsQ0FBQyxzRkFBRCxFQUF5RixZQUFXO0FBQ3BHLHFCQUFPLENBQUMsQ0FBRCxFQUFHLENBQUgsRUFBSyxDQUFMLEVBQU8sQ0FBUCxDQUFQLEVBQWtCLFVBQUFPLENBQUM7QUFBQSxhQUFJQSxDQUFDLEdBQUcsQ0FBSixJQUFTLENBQWI7QUFBQSxLQUFuQixFQUFtQ1QsTUFBbkMsQ0FBMENPLElBQTFDLENBQStDSCxLQUEvQyxDQUFxRCxDQUFDLENBQUQsRUFBRyxDQUFILENBQXJEO0FBQ0QsR0FGQyxDQUFGO0FBR0FGLEVBQUFBLEVBQUUsQ0FBQyxzR0FBRCxFQUF5RyxZQUFXO0FBQ3BIRixJQUFBQSxNQUFNLENBQUNHLEdBQVAsQ0FBV0MsS0FBWCxDQUFpQix5QkFBZSxDQUFmLENBQWpCLEVBQW9DLElBQXBDLEVBQTBDLGlCQUExQztBQUNBLDZCQUFlLENBQWYsRUFBa0JNLElBQWxCLENBQXVCVixNQUF2QixDQUE4QkksS0FBOUIsQ0FBb0MsUUFBcEM7QUFDRCxHQUhDLENBQUY7QUFJQUYsRUFBQUEsRUFBRSxDQUFDLHFDQUFELEVBQXdDLFlBQVc7QUFDbkQsb0NBQXNCUyxNQUF0QixDQUE2QlgsTUFBN0IsQ0FBb0NJLEtBQXBDLENBQTBDLENBQTFDO0FBQ0QsR0FGQyxDQUFGO0FBR0FGLEVBQUFBLEVBQUUsQ0FBQyxtQ0FBRCxFQUFzQyxZQUFXO0FBQ2pELCtCQUFpQlUsS0FBakIsQ0FBdUIsVUFBQUgsQ0FBQyxFQUFJO0FBQzFCQSxNQUFBQSxDQUFDLENBQUNFLE1BQUYsQ0FBU1gsTUFBVCxDQUFnQkksS0FBaEIsQ0FBc0IsQ0FBdEI7QUFDRCxLQUZEO0FBR0QsR0FKQyxDQUFGO0FBS0FGLEVBQUFBLEVBQUUsQ0FBQyxtRUFBRCxFQUFzRSxZQUFXO0FBQ2pGLGtEQUFvQ1MsTUFBcEMsQ0FBMkNYLE1BQTNDLENBQWtESSxLQUFsRCxDQUF3RCxDQUF4RDtBQUNBLGtEQUFvQ1EsS0FBcEMsQ0FBMEMsVUFBQUgsQ0FBQyxFQUFJO0FBQzdDQSxNQUFBQSxDQUFDLENBQUNULE1BQUYsQ0FBU2EsS0FBVCxDQUFlLFVBQWY7QUFDRCxLQUZEO0FBR0QsR0FMQyxDQUFGO0FBTUFYLEVBQUFBLEVBQUUsQ0FBQyxxREFBRCxFQUF3RCxZQUFXO0FBQ25FLGdDQUFrQlksT0FBbEIsQ0FBMEIsVUFBQUMsQ0FBQztBQUFBLGFBQUlBLENBQUMsQ0FBQ2YsTUFBRixDQUFTZ0IsSUFBVCxDQUFjQyxHQUFkLENBQWtCQyxJQUFsQixDQUF1QixNQUF2QixFQUE4QixPQUE5QixFQUFzQyxPQUF0QyxDQUFKO0FBQUEsS0FBM0I7QUFDQSxnQ0FBa0JQLE1BQWxCLENBQXlCWCxNQUF6QixDQUFnQ0ksS0FBaEMsQ0FBc0MsQ0FBdEM7QUFDRCxHQUhDLENBQUY7QUFJRCxDQTdCTyxDQUFSIiwic291cmNlUm9vdCI6Ii9ob21lL2FybmF1ZGdlaXNlci9naXQvd29ya3Nob3AtZnAvY29kZS9wYXJ0aWUyIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgXG4gIGRvdWJsZSwgXG4gIGRvdWJsZUFycmF5LFxuICBhZGQ1IH1cbmZyb20gJy4vZXgxJztcblxuaW1wb3J0IHsgXG4gIGZpbmRQZXJzb25CeUlkLFxuICBwZW9wbGVBY3JvbnltcywgXG4gIHBlb3BsZUFjcm9ueW1zVXBwZXJjYXNlU3RhcnRXaXRoRCxcbiAgcGVvcGxlWW91bmdlclRoYW4zMCxcbiAgY29tbWVudHNCeU1vdmllLCBcbiAgbWFwLFxuICBmaWx0ZXJ9IFxuZnJvbSAnLi9leDInO1xuXG5jb25zdCBjaGFpID0gcmVxdWlyZSgnY2hhaScpO1xuY29uc3Qgc2hvdWxkID0gY2hhaS5zaG91bGQoKTtcblxuZGVzY3JpYmUoJ0ZpcnN0LWNsYXNzIGZ1bmN0aW9ucycsIGZ1bmN0aW9uKCkge1xuICBpdCgnMS4gSSBjYW4gc3RvcmUgYSBmdW5jdGlvbiBpbiBhIHZhcmlhYmxlJywgZnVuY3Rpb24oKSB7XG4gICAgc2hvdWxkLm5vdC5lcXVhbChkb3VibGUsIG51bGwsIFwiZG91YmxlIG5lIGRvaXQgcGFzIMOqdHJlIG51bGxcIik7XG4gICAgZG91YmxlKDIpLnNob3VsZC5lcXVhbCg0KTtcbiAgfSk7XG4gIGl0KCcyLiBJIGNhbiBwYXNzIGEgZnVuY3Rpb24gdG8gYW5vdGhlciBmdW5jdGlvbiBhcyBwYXJhbWV0ZXInLCBmdW5jdGlvbigpIHtcbiAgICBkb3VibGVBcnJheShbMSwyLDRdLCAoeCkgPT4geCAqIDIpLnNob3VsZC5kZWVwLmVxdWFsKFsyLDQsOF0pO1xuICB9KTtcbn0pXG5cbmRlc2NyaWJlKCdIaWdoZXItb3JkZXIgZnVuY3Rpb25zJywgZnVuY3Rpb24oKSB7XG4gIGl0KCcxLiBJIGNhbiBjcmVhdGUgYSBmdW5jdGlvbiBmcm9tIGEgZnVuY3Rpb24nLCBmdW5jdGlvbigpIHtcbiAgICBzaG91bGQubm90LmVxdWFsKGFkZDUsIG51bGwsIFwiYWRkNSBuZSBkb2l0IHBhcyDDqnRyZSBudWxsXCIpO1xuICAgIGFkZDUoMikuc2hvdWxkLmVxdWFsKDcpO1xuICB9KTtcbn0pO1xuIFxuZGVzY3JpYmUoJ01vdmllcyBldCBwZW9wbGVzJywgZnVuY3Rpb24oKSB7XG4gIGl0KCcxLiBJIGNhbiBwYXNzIGFuIGFycmF5IGFuZCBhIGZ1bmN0aW9uIHRvIGFwcGx5IGEgdHJhbnNmb3JtYXRpb24gdmlhIHRoZSBtYXAoKSBmdW5jdGlvbicsIGZ1bmN0aW9uKCkge1xuICAgIG1hcChbMSwyLDMsNF0sIGUgPT4gZSAqIDIpLnNob3VsZC5kZWVwLmVxdWFsKFsyLDQsNiw4XSk7XG4gIH0pO1xuICBpdCgnMi4gSSBjYW4gcGFzcyBhbiBhcnJheSBhbmQgYSBwcmVkaWNhdGUgdG8gZmlsdGVyIG91dCBpdGVtcyB2aWEgdGhlIGZpbHRlcigpIGZ1bmN0aW9uJywgZnVuY3Rpb24oKSB7XG4gICAgZmlsdGVyKFsxLDIsMyw0XSwgZSA9PiBlICUgMiA9PSAwKS5zaG91bGQuZGVlcC5lcXVhbChbMiw0XSk7IFxuICB9KTtcbiAgaXQoJzMuIEkgY2FuIGNyZWF0ZSBhIGZ1bmN0aW9uIHRoYXQgY2xvc2Ugb3ZlciBhIHZhcmlhYmxlIGluIGl0cyBlbnZpcm9ubmVtZW50LCB0aGF0XFwnIGNhbGxlZCBhIGNsb3N1cmUhJywgZnVuY3Rpb24oKSB7XG4gICAgc2hvdWxkLm5vdC5lcXVhbChmaW5kUGVyc29uQnlJZCgxKSwgbnVsbCwgXCJOb3QgaW1wbGVtZW50ZWRcIik7XG4gICAgZmluZFBlcnNvbkJ5SWQoMSkubmFtZS5zaG91bGQuZXF1YWwoXCJBcm5hdWRcIik7XG4gIH0pO1xuICBpdCgnNC4gSSBjYW4gZ2V0IHBlb3BsZSB5b3VuZ2VyIHRoYW4gMzAnLCBmdW5jdGlvbigpIHtcbiAgICBwZW9wbGVZb3VuZ2VyVGhhbjMwKCkubGVuZ3RoLnNob3VsZC5lcXVhbCgyKTtcbiAgfSk7XG4gIGl0KCc1LiBJIGNhbiBnZXQgdHdvIGxldHRlcnMgYWNyb255bXMnLCBmdW5jdGlvbigpIHtcbiAgICBwZW9wbGVBY3JvbnltcygpLmV2ZXJ5KGUgPT4ge1xuICAgICAgZS5sZW5ndGguc2hvdWxkLmVxdWFsKDIpXG4gICAgfSk7XG4gIH0pXG4gIGl0KCc2LiBJIGNhbiBnZXQgdHdvIGxldHRlcnMgYWNyb255bXMgaW4gdXBwZXJjYXNlIHRoYXQgc3RhcnRzIHdpdGggRCcsIGZ1bmN0aW9uKCkge1xuICAgIHBlb3BsZUFjcm9ueW1zVXBwZXJjYXNlU3RhcnRXaXRoRCgpLmxlbmd0aC5zaG91bGQuZXF1YWwoMik7XG4gICAgcGVvcGxlQWNyb255bXNVcHBlcmNhc2VTdGFydFdpdGhEKCkuZXZlcnkoZSA9PiB7XG4gICAgICBlLnNob3VsZC5tYXRjaCgvXkRbQS1aXSQvKVxuICAgIH0pO1xuICB9KVxuICBpdCgnNy4gSSBjYW4gZ2V0IGFsbCBjb21tZW50cyBmb3IgZWFjaCBtb3ZpZSBhbmQgcGVvcGxlJywgZnVuY3Rpb24oKSB7XG4gICAgY29tbWVudHNCeU1vdmllKCkuZm9yRWFjaChjID0+IGMuc2hvdWxkLmhhdmUuYWxsLmtleXMoJ25hbWUnLCdncmFkZScsJ21vdmllJykpO1xuICAgIGNvbW1lbnRzQnlNb3ZpZSgpLmxlbmd0aC5zaG91bGQuZXF1YWwoOCk7XG4gIH0pO1xufSk7ICJdfQ==",
    "map": {
      "version": 3,
      "sources": [
        "test.js"
      ],
      "names": [
        "chai",
        "require",
        "should",
        "describe",
        "it",
        "not",
        "equal",
        "double",
        "x",
        "deep",
        "add5",
        "e",
        "name",
        "length",
        "every",
        "match",
        "forEach",
        "c",
        "have",
        "all",
        "keys"
      ],
      "mappings": ";;AAAA;;AAMA;;AAUA,IAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,IAAMC,MAAM,GAAGF,IAAI,CAACE,MAAL,EAAf;AAEAC,QAAQ,CAAC,uBAAD,EAA0B,YAAW;AAC3CC,EAAAA,EAAE,CAAC,yCAAD,EAA4C,YAAW;AACvDF,IAAAA,MAAM,CAACG,GAAP,CAAWC,KAAX,CAAiBC,aAAjB,EAAyB,IAAzB,EAA+B,8BAA/B;AACA,uBAAO,CAAP,EAAUL,MAAV,CAAiBI,KAAjB,CAAuB,CAAvB;AACD,GAHC,CAAF;AAIAF,EAAAA,EAAE,CAAC,2DAAD,EAA8D,YAAW;AACzE,yBAAY,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAAZ,EAAqB,UAACI,CAAD;AAAA,aAAOA,CAAC,GAAG,CAAX;AAAA,KAArB,EAAmCN,MAAnC,CAA0CO,IAA1C,CAA+CH,KAA/C,CAAqD,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAArD;AACD,GAFC,CAAF;AAGD,CARO,CAAR;AAUAH,QAAQ,CAAC,wBAAD,EAA2B,YAAW;AAC5CC,EAAAA,EAAE,CAAC,4CAAD,EAA+C,YAAW;AAC1DF,IAAAA,MAAM,CAACG,GAAP,CAAWC,KAAX,CAAiBI,QAAjB,EAAuB,IAAvB,EAA6B,4BAA7B;AACA,kBAAK,CAAL,EAAQR,MAAR,CAAeI,KAAf,CAAqB,CAArB;AACD,GAHC,CAAF;AAID,CALO,CAAR;AAOAH,QAAQ,CAAC,mBAAD,EAAsB,YAAW;AACvCC,EAAAA,EAAE,CAAC,wFAAD,EAA2F,YAAW;AACtG,kBAAI,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,CAAJ,EAAe,UAAAO,CAAC;AAAA,aAAIA,CAAC,GAAG,CAAR;AAAA,KAAhB,EAA2BT,MAA3B,CAAkCO,IAAlC,CAAuCH,KAAvC,CAA6C,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,CAA7C;AACD,GAFC,CAAF;AAGAF,EAAAA,EAAE,CAAC,sFAAD,EAAyF,YAAW;AACpG,qBAAO,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,CAAP,EAAkB,UAAAO,CAAC;AAAA,aAAIA,CAAC,GAAG,CAAJ,IAAS,CAAb;AAAA,KAAnB,EAAmCT,MAAnC,CAA0CO,IAA1C,CAA+CH,KAA/C,CAAqD,CAAC,CAAD,EAAG,CAAH,CAArD;AACD,GAFC,CAAF;AAGAF,EAAAA,EAAE,CAAC,sGAAD,EAAyG,YAAW;AACpHF,IAAAA,MAAM,CAACG,GAAP,CAAWC,KAAX,CAAiB,yBAAe,CAAf,CAAjB,EAAoC,IAApC,EAA0C,iBAA1C;AACA,6BAAe,CAAf,EAAkBM,IAAlB,CAAuBV,MAAvB,CAA8BI,KAA9B,CAAoC,QAApC;AACD,GAHC,CAAF;AAIAF,EAAAA,EAAE,CAAC,qCAAD,EAAwC,YAAW;AACnD,oCAAsBS,MAAtB,CAA6BX,MAA7B,CAAoCI,KAApC,CAA0C,CAA1C;AACD,GAFC,CAAF;AAGAF,EAAAA,EAAE,CAAC,mCAAD,EAAsC,YAAW;AACjD,+BAAiBU,KAAjB,CAAuB,UAAAH,CAAC,EAAI;AAC1BA,MAAAA,CAAC,CAACE,MAAF,CAASX,MAAT,CAAgBI,KAAhB,CAAsB,CAAtB;AACD,KAFD;AAGD,GAJC,CAAF;AAKAF,EAAAA,EAAE,CAAC,mEAAD,EAAsE,YAAW;AACjF,kDAAoCS,MAApC,CAA2CX,MAA3C,CAAkDI,KAAlD,CAAwD,CAAxD;AACA,kDAAoCQ,KAApC,CAA0C,UAAAH,CAAC,EAAI;AAC7CA,MAAAA,CAAC,CAACT,MAAF,CAASa,KAAT,CAAe,UAAf;AACD,KAFD;AAGD,GALC,CAAF;AAMAX,EAAAA,EAAE,CAAC,qDAAD,EAAwD,YAAW;AACnE,gCAAkBY,OAAlB,CAA0B,UAAAC,CAAC;AAAA,aAAIA,CAAC,CAACf,MAAF,CAASgB,IAAT,CAAcC,GAAd,CAAkBC,IAAlB,CAAuB,MAAvB,EAA8B,OAA9B,EAAsC,OAAtC,CAAJ;AAAA,KAA3B;AACA,gCAAkBP,MAAlB,CAAyBX,MAAzB,CAAgCI,KAAhC,CAAsC,CAAtC;AACD,GAHC,CAAF;AAID,CA7BO,CAAR",
      "sourceRoot": "/home/arnaudgeiser/git/workshop-fp/code/partie2",
      "sourcesContent": [
        "import { \n  double, \n  doubleArray,\n  add5 }\nfrom './ex1';\n\nimport { \n  findPersonById,\n  peopleAcronyms, \n  peopleAcronymsUppercaseStartWithD,\n  peopleYoungerThan30,\n  commentsByMovie, \n  map,\n  filter} \nfrom './ex2';\n\nconst chai = require('chai');\nconst should = chai.should();\n\ndescribe('First-class functions', function() {\n  it('1. I can store a function in a variable', function() {\n    should.not.equal(double, null, \"double ne doit pas être null\");\n    double(2).should.equal(4);\n  });\n  it('2. I can pass a function to another function as parameter', function() {\n    doubleArray([1,2,4], (x) => x * 2).should.deep.equal([2,4,8]);\n  });\n})\n\ndescribe('Higher-order functions', function() {\n  it('1. I can create a function from a function', function() {\n    should.not.equal(add5, null, \"add5 ne doit pas être null\");\n    add5(2).should.equal(7);\n  });\n});\n \ndescribe('Movies et peoples', function() {\n  it('1. I can pass an array and a function to apply a transformation via the map() function', function() {\n    map([1,2,3,4], e => e * 2).should.deep.equal([2,4,6,8]);\n  });\n  it('2. I can pass an array and a predicate to filter out items via the filter() function', function() {\n    filter([1,2,3,4], e => e % 2 == 0).should.deep.equal([2,4]); \n  });\n  it('3. I can create a function that close over a variable in its environnement, that\\' called a closure!', function() {\n    should.not.equal(findPersonById(1), null, \"Not implemented\");\n    findPersonById(1).name.should.equal(\"Arnaud\");\n  });\n  it('4. I can get people younger than 30', function() {\n    peopleYoungerThan30().length.should.equal(2);\n  });\n  it('5. I can get two letters acronyms', function() {\n    peopleAcronyms().every(e => {\n      e.length.should.equal(2)\n    });\n  })\n  it('6. I can get two letters acronyms in uppercase that starts with D', function() {\n    peopleAcronymsUppercaseStartWithD().length.should.equal(2);\n    peopleAcronymsUppercaseStartWithD().every(e => {\n      e.should.match(/^D[A-Z]$/)\n    });\n  })\n  it('7. I can get all comments for each movie and people', function() {\n    commentsByMovie().forEach(c => c.should.have.all.keys('name','grade','movie'));\n    commentsByMovie().length.should.equal(8);\n  });\n}); "
      ]
    },
    "sourceType": "script",
    "mtime": 1559146500988
  },
  "{\"sourceRoot\":\"/home/arnaudgeiser/git/workshop-fp/code/partie2\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/home/arnaudgeiser/git/workshop-fp/code/partie2\",\"filename\":\"/home/arnaudgeiser/git/workshop-fp/code/partie2/partie2.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/home/arnaudgeiser/git/workshop-fp/code/partie2\",\"plugins\":[{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ObjectMethod\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]},\"ClassMethod\":{\"exit\":[null]},\"ClassPrivateMethod\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.4.4": {
    "metadata": {},
    "options": {
      "sourceRoot": "/home/arnaudgeiser/git/workshop-fp/code/partie2",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/home/arnaudgeiser/git/workshop-fp/code/partie2",
      "filename": "/home/arnaudgeiser/git/workshop-fp/code/partie2/partie2.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/home/arnaudgeiser/git/workshop-fp/code/partie2",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectMethod": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/home/arnaudgeiser/git/workshop-fp/code/partie2/partie2.js",
        "plugins": [
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "/home/arnaudgeiser/git/workshop-fp/code/partie2/partie2.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/home/arnaudgeiser/git/workshop-fp/code/partie2",
        "sourceFileName": "partie2.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nfunction _double(x) {\n  return x * x;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBhcnRpZTIuanMiXSwibmFtZXMiOlsiZG91YmxlIiwieCJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxTQUFTQSxPQUFULENBQWdCQyxDQUFoQixFQUFtQjtBQUNmLFNBQU9BLENBQUMsR0FBR0EsQ0FBWDtBQUNIIiwic291cmNlUm9vdCI6Ii9ob21lL2FybmF1ZGdlaXNlci9naXQvd29ya3Nob3AtZnAvY29kZS9wYXJ0aWUyIiwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gZG91YmxlKHgpIHtcbiAgICByZXR1cm4geCAqIHg7XG59Il19",
    "map": {
      "version": 3,
      "sources": [
        "partie2.js"
      ],
      "names": [
        "double",
        "x"
      ],
      "mappings": ";;AAAA,SAASA,OAAT,CAAgBC,CAAhB,EAAmB;AACf,SAAOA,CAAC,GAAGA,CAAX;AACH",
      "sourceRoot": "/home/arnaudgeiser/git/workshop-fp/code/partie2",
      "sourcesContent": [
        "function double(x) {\n    return x * x;\n}"
      ]
    },
    "sourceType": "script",
    "mtime": 1558456912643
  },
  "{\"sourceRoot\":\"/home/arnaudgeiser/git/workshop-fp/code/partie2\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/home/arnaudgeiser/git/workshop-fp/code/partie2\",\"filename\":\"/home/arnaudgeiser/git/workshop-fp/code/partie2/src.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/home/arnaudgeiser/git/workshop-fp/code/partie2\",\"plugins\":[{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ObjectMethod\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]},\"ClassMethod\":{\"exit\":[null]},\"ClassPrivateMethod\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.4.4": {
    "metadata": {},
    "options": {
      "sourceRoot": "/home/arnaudgeiser/git/workshop-fp/code/partie2",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/home/arnaudgeiser/git/workshop-fp/code/partie2",
      "filename": "/home/arnaudgeiser/git/workshop-fp/code/partie2/src.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/home/arnaudgeiser/git/workshop-fp/code/partie2",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectMethod": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/home/arnaudgeiser/git/workshop-fp/code/partie2/src.js",
        "plugins": [
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "/home/arnaudgeiser/git/workshop-fp/code/partie2/src.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/home/arnaudgeiser/git/workshop-fp/code/partie2",
        "sourceFileName": "src.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.peopleYoungerThan30 = peopleYoungerThan30;\nexports._double = _double;\nexports._add = _add;\nexports.doubleArray = doubleArray;\nexports.addCurry = addCurry;\nexports.add5 = add5;\nexports[\"double\"] = void 0;\nvar people = [{\n  name: \"Arnaud\",\n  age: 29\n}, {\n  name: \"Xavier\",\n  age: 22\n}, {\n  name: \"Robert\",\n  age: 50\n}, {\n  name: \"Damien\",\n  age: 37\n}, {\n  name: \"Jerome\",\n  age: 90\n}];\nvar movies = [{\n  title: \"Movie 1\",\n  author: \"Author 1\",\n  releaseDate: new Date()\n}];\n\nfunction peopleYoungerThan30() {\n  return people.map(function (p) {\n    return p.age < 30;\n  });\n} // Int -> Int\n\n\nfunction _double(x) {\n  return x * x;\n}\n\nfunction _add(x, y, z) {\n  return x + y + z;\n} // ([Int], (Int -> Int)) -> [Int]\n\n\nfunction doubleArray(arr, f) {\n  var arr2 = [];\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = arr[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var a = _step.value;\n      arr2.push(f(a));\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n        _iterator[\"return\"]();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return arr2;\n}\n\nfunction addCurry(x) {\n  return function (y) {\n    return function (z) {\n      return x + y + z;\n    };\n  };\n} // Int -> (Int -> Int)\n\n\nfunction add5(y) {\n  return add(5, y);\n}\n\nvar _double2 = _double;\nexports[\"double\"] = _double2;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy5qcyJdLCJuYW1lcyI6WyJwZW9wbGUiLCJuYW1lIiwiYWdlIiwibW92aWVzIiwidGl0bGUiLCJhdXRob3IiLCJyZWxlYXNlRGF0ZSIsIkRhdGUiLCJwZW9wbGVZb3VuZ2VyVGhhbjMwIiwibWFwIiwicCIsIl9kb3VibGUiLCJ4IiwiX2FkZCIsInkiLCJ6IiwiZG91YmxlQXJyYXkiLCJhcnIiLCJmIiwiYXJyMiIsImEiLCJwdXNoIiwiYWRkQ3VycnkiLCJhZGQ1IiwiYWRkIiwiZG91YmxlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQSxJQUFNQSxNQUFNLEdBQUcsQ0FDWDtBQUNJQyxFQUFBQSxJQUFJLEVBQUUsUUFEVjtBQUVJQyxFQUFBQSxHQUFHLEVBQUU7QUFGVCxDQURXLEVBS1g7QUFDSUQsRUFBQUEsSUFBSSxFQUFFLFFBRFY7QUFFSUMsRUFBQUEsR0FBRyxFQUFFO0FBRlQsQ0FMVyxFQVNYO0FBQ0lELEVBQUFBLElBQUksRUFBRSxRQURWO0FBRUlDLEVBQUFBLEdBQUcsRUFBRTtBQUZULENBVFcsRUFhWDtBQUNJRCxFQUFBQSxJQUFJLEVBQUUsUUFEVjtBQUVJQyxFQUFBQSxHQUFHLEVBQUc7QUFGVixDQWJXLEVBaUJYO0FBQ0lELEVBQUFBLElBQUksRUFBRSxRQURWO0FBRUlDLEVBQUFBLEdBQUcsRUFBRztBQUZWLENBakJXLENBQWY7QUF1QkEsSUFBTUMsTUFBTSxHQUFHLENBQ1g7QUFDSUMsRUFBQUEsS0FBSyxFQUFFLFNBRFg7QUFFSUMsRUFBQUEsTUFBTSxFQUFFLFVBRlo7QUFHSUMsRUFBQUEsV0FBVyxFQUFFLElBQUlDLElBQUo7QUFIakIsQ0FEVyxDQUFmOztBQVFPLFNBQVNDLG1CQUFULEdBQStCO0FBQ2xDLFNBQU9SLE1BQU0sQ0FBQ1MsR0FBUCxDQUFXLFVBQUFDLENBQUM7QUFBQSxXQUFJQSxDQUFDLENBQUNSLEdBQUYsR0FBUSxFQUFaO0FBQUEsR0FBWixDQUFQO0FBQ0gsQyxDQUVEOzs7QUFDTyxTQUFTUyxPQUFULENBQWlCQyxDQUFqQixFQUFvQjtBQUN2QixTQUFPQSxDQUFDLEdBQUdBLENBQVg7QUFDSDs7QUFFTSxTQUFTQyxJQUFULENBQWNELENBQWQsRUFBZ0JFLENBQWhCLEVBQWtCQyxDQUFsQixFQUFxQjtBQUN4QixTQUFPSCxDQUFDLEdBQUdFLENBQUosR0FBUUMsQ0FBZjtBQUNILEMsQ0FFRDs7O0FBQ08sU0FBU0MsV0FBVCxDQUFxQkMsR0FBckIsRUFBMEJDLENBQTFCLEVBQTZCO0FBQ2hDLE1BQUlDLElBQUksR0FBRyxFQUFYO0FBRGdDO0FBQUE7QUFBQTs7QUFBQTtBQUVoQyx5QkFBYUYsR0FBYiw4SEFBa0I7QUFBQSxVQUFWRyxDQUFVO0FBQ2RELE1BQUFBLElBQUksQ0FBQ0UsSUFBTCxDQUFVSCxDQUFDLENBQUNFLENBQUQsQ0FBWDtBQUNIO0FBSitCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBS2hDLFNBQU9ELElBQVA7QUFDSDs7QUFFTSxTQUFTRyxRQUFULENBQWtCVixDQUFsQixFQUFxQjtBQUN4QixTQUFPLFVBQUFFLENBQUM7QUFBQSxXQUFJLFVBQUFDLENBQUM7QUFBQSxhQUFJSCxDQUFDLEdBQUdFLENBQUosR0FBUUMsQ0FBWjtBQUFBLEtBQUw7QUFBQSxHQUFSO0FBQ0gsQyxDQUVEOzs7QUFDTyxTQUFTUSxJQUFULENBQWNULENBQWQsRUFBaUI7QUFDcEIsU0FBT1UsR0FBRyxDQUFDLENBQUQsRUFBR1YsQ0FBSCxDQUFWO0FBQ0g7O0FBRUQsSUFBSVcsUUFBTSxHQUFHZCxPQUFiIiwic291cmNlUm9vdCI6Ii9ob21lL2FybmF1ZGdlaXNlci9naXQvd29ya3Nob3AtZnAvY29kZS9wYXJ0aWUyIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgcGVvcGxlID0gW1xuICAgIHtcbiAgICAgICAgbmFtZTogXCJBcm5hdWRcIixcbiAgICAgICAgYWdlOiAyOVxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIlhhdmllclwiLFxuICAgICAgICBhZ2U6IDIyXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiUm9iZXJ0XCIsXG4gICAgICAgIGFnZTogNTBcbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJEYW1pZW5cIixcbiAgICAgICAgYWdlIDogMzdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJKZXJvbWVcIixcbiAgICAgICAgYWdlIDogOTBcbiAgICB9XG5dXG5cbmNvbnN0IG1vdmllcyA9IFtcbiAgICB7XG4gICAgICAgIHRpdGxlOiBcIk1vdmllIDFcIixcbiAgICAgICAgYXV0aG9yOiBcIkF1dGhvciAxXCIsXG4gICAgICAgIHJlbGVhc2VEYXRlOiBuZXcgRGF0ZSgpXG4gICAgfVxuXVxuXG5leHBvcnQgZnVuY3Rpb24gcGVvcGxlWW91bmdlclRoYW4zMCgpIHtcbiAgICByZXR1cm4gcGVvcGxlLm1hcChwID0+IHAuYWdlIDwgMzApO1xufVxuXG4vLyBJbnQgLT4gSW50XG5leHBvcnQgZnVuY3Rpb24gX2RvdWJsZSh4KSB7XG4gICAgcmV0dXJuIHggKiB4O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX2FkZCh4LHkseikge1xuICAgIHJldHVybiB4ICsgeSArIHo7XG59XG5cbi8vIChbSW50XSwgKEludCAtPiBJbnQpKSAtPiBbSW50XVxuZXhwb3J0IGZ1bmN0aW9uIGRvdWJsZUFycmF5KGFyciwgZikge1xuICAgIGxldCBhcnIyID0gW107XG4gICAgZm9yKGxldCBhIG9mIGFycikge1xuICAgICAgICBhcnIyLnB1c2goZihhKSk7XG4gICAgfVxuICAgIHJldHVybiBhcnIyO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYWRkQ3VycnkoeCkge1xuICAgIHJldHVybiB5ID0+IHogPT4geCArIHkgKyB6O1xufVxuXG4vLyBJbnQgLT4gKEludCAtPiBJbnQpXG5leHBvcnQgZnVuY3Rpb24gYWRkNSh5KSB7XG4gICAgcmV0dXJuIGFkZCg1LHkpO1xufVxuXG52YXIgZG91YmxlID0gX2RvdWJsZTtcblxuZXhwb3J0IHtkb3VibGV9OyJdfQ==",
    "map": {
      "version": 3,
      "sources": [
        "src.js"
      ],
      "names": [
        "people",
        "name",
        "age",
        "movies",
        "title",
        "author",
        "releaseDate",
        "Date",
        "peopleYoungerThan30",
        "map",
        "p",
        "_double",
        "x",
        "_add",
        "y",
        "z",
        "doubleArray",
        "arr",
        "f",
        "arr2",
        "a",
        "push",
        "addCurry",
        "add5",
        "add",
        "double"
      ],
      "mappings": ";;;;;;;;;;;;AAAA,IAAMA,MAAM,GAAG,CACX;AACIC,EAAAA,IAAI,EAAE,QADV;AAEIC,EAAAA,GAAG,EAAE;AAFT,CADW,EAKX;AACID,EAAAA,IAAI,EAAE,QADV;AAEIC,EAAAA,GAAG,EAAE;AAFT,CALW,EASX;AACID,EAAAA,IAAI,EAAE,QADV;AAEIC,EAAAA,GAAG,EAAE;AAFT,CATW,EAaX;AACID,EAAAA,IAAI,EAAE,QADV;AAEIC,EAAAA,GAAG,EAAG;AAFV,CAbW,EAiBX;AACID,EAAAA,IAAI,EAAE,QADV;AAEIC,EAAAA,GAAG,EAAG;AAFV,CAjBW,CAAf;AAuBA,IAAMC,MAAM,GAAG,CACX;AACIC,EAAAA,KAAK,EAAE,SADX;AAEIC,EAAAA,MAAM,EAAE,UAFZ;AAGIC,EAAAA,WAAW,EAAE,IAAIC,IAAJ;AAHjB,CADW,CAAf;;AAQO,SAASC,mBAAT,GAA+B;AAClC,SAAOR,MAAM,CAACS,GAAP,CAAW,UAAAC,CAAC;AAAA,WAAIA,CAAC,CAACR,GAAF,GAAQ,EAAZ;AAAA,GAAZ,CAAP;AACH,C,CAED;;;AACO,SAASS,OAAT,CAAiBC,CAAjB,EAAoB;AACvB,SAAOA,CAAC,GAAGA,CAAX;AACH;;AAEM,SAASC,IAAT,CAAcD,CAAd,EAAgBE,CAAhB,EAAkBC,CAAlB,EAAqB;AACxB,SAAOH,CAAC,GAAGE,CAAJ,GAAQC,CAAf;AACH,C,CAED;;;AACO,SAASC,WAAT,CAAqBC,GAArB,EAA0BC,CAA1B,EAA6B;AAChC,MAAIC,IAAI,GAAG,EAAX;AADgC;AAAA;AAAA;;AAAA;AAEhC,yBAAaF,GAAb,8HAAkB;AAAA,UAAVG,CAAU;AACdD,MAAAA,IAAI,CAACE,IAAL,CAAUH,CAAC,CAACE,CAAD,CAAX;AACH;AAJ+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKhC,SAAOD,IAAP;AACH;;AAEM,SAASG,QAAT,CAAkBV,CAAlB,EAAqB;AACxB,SAAO,UAAAE,CAAC;AAAA,WAAI,UAAAC,CAAC;AAAA,aAAIH,CAAC,GAAGE,CAAJ,GAAQC,CAAZ;AAAA,KAAL;AAAA,GAAR;AACH,C,CAED;;;AACO,SAASQ,IAAT,CAAcT,CAAd,EAAiB;AACpB,SAAOU,GAAG,CAAC,CAAD,EAAGV,CAAH,CAAV;AACH;;AAED,IAAIW,QAAM,GAAGd,OAAb",
      "sourceRoot": "/home/arnaudgeiser/git/workshop-fp/code/partie2",
      "sourcesContent": [
        "const people = [\n    {\n        name: \"Arnaud\",\n        age: 29\n    },\n    {\n        name: \"Xavier\",\n        age: 22\n    },\n    {\n        name: \"Robert\",\n        age: 50\n    },\n    {\n        name: \"Damien\",\n        age : 37\n    },\n    {\n        name: \"Jerome\",\n        age : 90\n    }\n]\n\nconst movies = [\n    {\n        title: \"Movie 1\",\n        author: \"Author 1\",\n        releaseDate: new Date()\n    }\n]\n\nexport function peopleYoungerThan30() {\n    return people.map(p => p.age < 30);\n}\n\n// Int -> Int\nexport function _double(x) {\n    return x * x;\n}\n\nexport function _add(x,y,z) {\n    return x + y + z;\n}\n\n// ([Int], (Int -> Int)) -> [Int]\nexport function doubleArray(arr, f) {\n    let arr2 = [];\n    for(let a of arr) {\n        arr2.push(f(a));\n    }\n    return arr2;\n}\n\nexport function addCurry(x) {\n    return y => z => x + y + z;\n}\n\n// Int -> (Int -> Int)\nexport function add5(y) {\n    return add(5,y);\n}\n\nvar double = _double;\n\nexport {double};"
      ]
    },
    "sourceType": "script",
    "mtime": 1558973151315
  },
  "{\"sourceRoot\":\"/home/arnaudgeiser/git/workshop-fp/code/partie2\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/home/arnaudgeiser/git/workshop-fp/code/partie2\",\"filename\":\"/home/arnaudgeiser/git/workshop-fp/code/partie2/ex1.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/home/arnaudgeiser/git/workshop-fp/code/partie2\",\"plugins\":[{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ObjectMethod\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]},\"ClassMethod\":{\"exit\":[null]},\"ClassPrivateMethod\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.4.4": {
    "metadata": {},
    "options": {
      "sourceRoot": "/home/arnaudgeiser/git/workshop-fp/code/partie2",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/home/arnaudgeiser/git/workshop-fp/code/partie2",
      "filename": "/home/arnaudgeiser/git/workshop-fp/code/partie2/ex1.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/home/arnaudgeiser/git/workshop-fp/code/partie2",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectMethod": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/home/arnaudgeiser/git/workshop-fp/code/partie2/ex1.js",
        "plugins": [
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "/home/arnaudgeiser/git/workshop-fp/code/partie2/ex1.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/home/arnaudgeiser/git/workshop-fp/code/partie2",
        "sourceFileName": "ex1.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.doubleArray = doubleArray;\nexports.add5 = exports[\"double\"] = void 0;\n\n/**\n * Double the value of x\n * Type: Number => Number\n */\nfunction _double(x) {\n  return x * 2;\n}\n/**\n * Add x to y\n * Type: (Number, Number) => Number\n */\n\n\nfunction _add(x, y) {\n  return x + y;\n}\n/**\n * Double the value of x\n * Type: Number => Number\n * \n * TODO : First class functions\n * 1. You can store a function in a variable\n */\n\n\nvar _double2 = _double;\n/**\n * Double the values of arr according to function f\n * Type: ([A], A => A) => [A]\n * \n * TODO : First-class fucntions\n * 2. You can pass a function to another function as parameter\n */\n\nexports[\"double\"] = _double2;\n\nfunction doubleArray(arr, f) {\n  var tmp = [];\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = arr[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var c = _step.value;\n      tmp.push(f(c));\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n        _iterator[\"return\"]();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return tmp;\n}\n/**\n * Returns a function that adds 5 to a given number\n * Type: Number => (Number => Number) \n * \n * TODO: Higher-order functions \n * 1. You can create a function from a function\n * \n */\n\n\nvar add5 = function add5(y) {\n  return _add(5, y);\n};\n\nexports.add5 = add5;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImV4MS5qcyJdLCJuYW1lcyI6WyJfZG91YmxlIiwieCIsIl9hZGQiLCJ5IiwiZG91YmxlIiwiZG91YmxlQXJyYXkiLCJhcnIiLCJmIiwidG1wIiwiYyIsInB1c2giLCJhZGQ1Il0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBOzs7O0FBSUEsU0FBU0EsT0FBVCxDQUFpQkMsQ0FBakIsRUFBb0I7QUFDaEIsU0FBT0EsQ0FBQyxHQUFHLENBQVg7QUFDSDtBQUVEOzs7Ozs7QUFJQSxTQUFTQyxJQUFULENBQWNELENBQWQsRUFBZ0JFLENBQWhCLEVBQW1CO0FBQ2YsU0FBT0YsQ0FBQyxHQUFHRSxDQUFYO0FBQ0g7QUFHRDs7Ozs7Ozs7O0FBT0EsSUFBSUMsUUFBTSxHQUFHSixPQUFiO0FBRUE7Ozs7Ozs7Ozs7QUFPTyxTQUFTSyxXQUFULENBQXFCQyxHQUFyQixFQUEwQkMsQ0FBMUIsRUFBNkI7QUFDaEMsTUFBSUMsR0FBRyxHQUFHLEVBQVY7QUFEZ0M7QUFBQTtBQUFBOztBQUFBO0FBRWhDLHlCQUFhRixHQUFiLDhIQUFrQjtBQUFBLFVBQVZHLENBQVU7QUFDZEQsTUFBQUEsR0FBRyxDQUFDRSxJQUFKLENBQVNILENBQUMsQ0FBQ0UsQ0FBRCxDQUFWO0FBQ0g7QUFKK0I7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFLaEMsU0FBT0QsR0FBUDtBQUNIO0FBR0Q7Ozs7Ozs7Ozs7QUFRQSxJQUFJRyxJQUFJLEdBQUcsU0FBUEEsSUFBTyxDQUFBUixDQUFDO0FBQUEsU0FBSUQsSUFBSSxDQUFDLENBQUQsRUFBR0MsQ0FBSCxDQUFSO0FBQUEsQ0FBWiIsInNvdXJjZVJvb3QiOiIvaG9tZS9hcm5hdWRnZWlzZXIvZ2l0L3dvcmtzaG9wLWZwL2NvZGUvcGFydGllMiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogRG91YmxlIHRoZSB2YWx1ZSBvZiB4XG4gKiBUeXBlOiBOdW1iZXIgPT4gTnVtYmVyXG4gKi9cbmZ1bmN0aW9uIF9kb3VibGUoeCkge1xuICAgIHJldHVybiB4ICogMjtcbn1cblxuLyoqXG4gKiBBZGQgeCB0byB5XG4gKiBUeXBlOiAoTnVtYmVyLCBOdW1iZXIpID0+IE51bWJlclxuICovXG5mdW5jdGlvbiBfYWRkKHgseSkge1xuICAgIHJldHVybiB4ICsgeTtcbn1cblxuXG4vKipcbiAqIERvdWJsZSB0aGUgdmFsdWUgb2YgeFxuICogVHlwZTogTnVtYmVyID0+IE51bWJlclxuICogXG4gKiBUT0RPIDogRmlyc3QgY2xhc3MgZnVuY3Rpb25zXG4gKiAxLiBZb3UgY2FuIHN0b3JlIGEgZnVuY3Rpb24gaW4gYSB2YXJpYWJsZVxuICovXG52YXIgZG91YmxlID0gX2RvdWJsZTtcblxuLyoqXG4gKiBEb3VibGUgdGhlIHZhbHVlcyBvZiBhcnIgYWNjb3JkaW5nIHRvIGZ1bmN0aW9uIGZcbiAqIFR5cGU6IChbQV0sIEEgPT4gQSkgPT4gW0FdXG4gKiBcbiAqIFRPRE8gOiBGaXJzdC1jbGFzcyBmdWNudGlvbnNcbiAqIDIuIFlvdSBjYW4gcGFzcyBhIGZ1bmN0aW9uIHRvIGFub3RoZXIgZnVuY3Rpb24gYXMgcGFyYW1ldGVyXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkb3VibGVBcnJheShhcnIsIGYpIHtcbiAgICBsZXQgdG1wID0gW107XG4gICAgZm9yKGxldCBjIG9mIGFycikge1xuICAgICAgICB0bXAucHVzaChmKGMpKTtcbiAgICB9XG4gICAgcmV0dXJuIHRtcDtcbn1cblxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0aGF0IGFkZHMgNSB0byBhIGdpdmVuIG51bWJlclxuICogVHlwZTogTnVtYmVyID0+IChOdW1iZXIgPT4gTnVtYmVyKSBcbiAqIFxuICogVE9ETzogSGlnaGVyLW9yZGVyIGZ1bmN0aW9ucyBcbiAqIDEuIFlvdSBjYW4gY3JlYXRlIGEgZnVuY3Rpb24gZnJvbSBhIGZ1bmN0aW9uXG4gKiBcbiAqLyBcbnZhciBhZGQ1ID0geSA9PiBfYWRkKDUseSk7XG5cbmV4cG9ydCB7ZG91YmxlLCBhZGQ1fTsiXX0=",
    "map": {
      "version": 3,
      "sources": [
        "ex1.js"
      ],
      "names": [
        "_double",
        "x",
        "_add",
        "y",
        "double",
        "doubleArray",
        "arr",
        "f",
        "tmp",
        "c",
        "push",
        "add5"
      ],
      "mappings": ";;;;;;;;AAAA;;;;AAIA,SAASA,OAAT,CAAiBC,CAAjB,EAAoB;AAChB,SAAOA,CAAC,GAAG,CAAX;AACH;AAED;;;;;;AAIA,SAASC,IAAT,CAAcD,CAAd,EAAgBE,CAAhB,EAAmB;AACf,SAAOF,CAAC,GAAGE,CAAX;AACH;AAGD;;;;;;;;;AAOA,IAAIC,QAAM,GAAGJ,OAAb;AAEA;;;;;;;;;;AAOO,SAASK,WAAT,CAAqBC,GAArB,EAA0BC,CAA1B,EAA6B;AAChC,MAAIC,GAAG,GAAG,EAAV;AADgC;AAAA;AAAA;;AAAA;AAEhC,yBAAaF,GAAb,8HAAkB;AAAA,UAAVG,CAAU;AACdD,MAAAA,GAAG,CAACE,IAAJ,CAASH,CAAC,CAACE,CAAD,CAAV;AACH;AAJ+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKhC,SAAOD,GAAP;AACH;AAGD;;;;;;;;;;AAQA,IAAIG,IAAI,GAAG,SAAPA,IAAO,CAAAR,CAAC;AAAA,SAAID,IAAI,CAAC,CAAD,EAAGC,CAAH,CAAR;AAAA,CAAZ",
      "sourceRoot": "/home/arnaudgeiser/git/workshop-fp/code/partie2",
      "sourcesContent": [
        "/**\n * Double the value of x\n * Type: Number => Number\n */\nfunction _double(x) {\n    return x * 2;\n}\n\n/**\n * Add x to y\n * Type: (Number, Number) => Number\n */\nfunction _add(x,y) {\n    return x + y;\n}\n\n\n/**\n * Double the value of x\n * Type: Number => Number\n * \n * TODO : First class functions\n * 1. You can store a function in a variable\n */\nvar double = _double;\n\n/**\n * Double the values of arr according to function f\n * Type: ([A], A => A) => [A]\n * \n * TODO : First-class fucntions\n * 2. You can pass a function to another function as parameter\n */\nexport function doubleArray(arr, f) {\n    let tmp = [];\n    for(let c of arr) {\n        tmp.push(f(c));\n    }\n    return tmp;\n}\n\n\n/**\n * Returns a function that adds 5 to a given number\n * Type: Number => (Number => Number) \n * \n * TODO: Higher-order functions \n * 1. You can create a function from a function\n * \n */ \nvar add5 = y => _add(5,y);\n\nexport {double, add5};"
      ]
    },
    "sourceType": "script",
    "mtime": 1559146099698
  },
  "{\"sourceRoot\":\"/home/arnaudgeiser/git/workshop-fp/code/partie2\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/home/arnaudgeiser/git/workshop-fp/code/partie2\",\"filename\":\"/home/arnaudgeiser/git/workshop-fp/code/partie2/ex2.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/home/arnaudgeiser/git/workshop-fp/code/partie2\",\"plugins\":[{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ObjectMethod\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]},\"ClassMethod\":{\"exit\":[null]},\"ClassPrivateMethod\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.4.4": {
    "metadata": {},
    "options": {
      "sourceRoot": "/home/arnaudgeiser/git/workshop-fp/code/partie2",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/home/arnaudgeiser/git/workshop-fp/code/partie2",
      "filename": "/home/arnaudgeiser/git/workshop-fp/code/partie2/ex2.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/home/arnaudgeiser/git/workshop-fp/code/partie2",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectMethod": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/home/arnaudgeiser/git/workshop-fp/code/partie2/ex2.js",
        "plugins": [
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "/home/arnaudgeiser/git/workshop-fp/code/partie2/ex2.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/home/arnaudgeiser/git/workshop-fp/code/partie2",
        "sourceFileName": "ex2.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.map = map;\nexports.filter = filter;\nexports.findPersonById = findPersonById;\nexports.peopleYoungerThan30 = peopleYoungerThan30;\nexports.peopleAcronyms = peopleAcronyms;\nexports.peopleAcronymsUppercaseStartWithD = peopleAcronymsUppercaseStartWithD;\nexports.commentsByMovie = commentsByMovie;\nvar people = [{\n  id: 1,\n  name: \"Arnaud\",\n  age: 29\n}, {\n  id: 2,\n  name: \"Xavier\",\n  age: 22\n}, {\n  id: 3,\n  name: \"Robert\",\n  age: 50\n}, {\n  id: 4,\n  name: \"Damien\",\n  age: 37\n}, {\n  id: 5,\n  name: \"Jerome\",\n  age: 90\n}, {\n  id: 6,\n  name: \"Dominique\",\n  age: 40\n}];\nvar movies = [{\n  title: \"Lord of the Rings\",\n  author: \"Peter Jackson\",\n  comments: [{\n    peopleId: 1,\n    grade: 5\n  }, {\n    peopleId: 2,\n    grade: 7\n  }, {\n    peopleId: 3,\n    grade: 4\n  }, {\n    peopleId: 4,\n    grade: 9\n  }]\n}, {\n  title: \"The Empire strikes back\",\n  author: \"Steven Spielberg\",\n  comments: [{\n    peopleId: 1,\n    grade: 2\n  }, {\n    peopleId: 2,\n    grade: 8\n  }, {\n    peopleId: 3,\n    grade: 10\n  }, {\n    peopleId: 4,\n    grade: 7\n  }]\n}];\n\nArray.prototype.flat = function () {\n  return this.reduce(function (acc, v) {\n    return acc.concat(v);\n  }, []);\n};\n/**\n * Applies a function (f) to each element of an array (arr).\n * Type: [A] => (A => B) => [B]\n * \n * TODO: \n * 1. I can pass an array and a function to apply a transformation via the map() function\n */\n\n\nfunction map(arr, f) {\n  var tmp = [];\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = arr[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var c = _step.value;\n      tmp.push(f(c));\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n        _iterator[\"return\"]();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return tmp;\n}\n/**\n * Filters the elements of an array (xs) keeping only those who match a given predicate (p).\n * Type: [A] => (A => Boolean) => [A]\n * \n * TODO:\n * 2. I can pass an array and a predicate to filter out items via the filter() function\n */\n\n\nfunction filter(arr, p) {\n  var tmp = [];\n  var _iteratorNormalCompletion2 = true;\n  var _didIteratorError2 = false;\n  var _iteratorError2 = undefined;\n\n  try {\n    for (var _iterator2 = arr[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n      var c = _step2.value;\n\n      if (p(c)) {\n        tmp.push(c);\n      }\n    }\n  } catch (err) {\n    _didIteratorError2 = true;\n    _iteratorError2 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion2 && _iterator2[\"return\"] != null) {\n        _iterator2[\"return\"]();\n      }\n    } finally {\n      if (_didIteratorError2) {\n        throw _iteratorError2;\n      }\n    }\n  }\n\n  return tmp;\n}\n/**\n * Returns a person by its id\n * Type: Int => Person\n * \n * TODO:\n * 3. I can create a function that close over a variable in its environnement, that\\' called a closure!\n */\n\n\nfunction findPersonById(id) {\n  return filter(people, function (p) {\n    return p.id === id;\n  })[0];\n}\n/**\n * Returns the people younger than 30\n * Type: Unit => [Person]\n * \n * TODO:\n * 4. I can get people younger than 30'\n */\n\n\nfunction peopleYoungerThan30() {\n  return filter(people, function (p) {\n    return p.age < 30;\n  });\n}\n/**\n * Returns the people acronyms\n * Type: Unit => [String]\n * Example: [\"Ar\", \"Xa\", Da\"]\n * \n * TODO:\n * 5. I can get two letters acronyms\n */\n\n\nfunction peopleAcronyms() {\n  return map(people, function (p) {\n    return p.name.substr(0, 2);\n  });\n}\n/**\n * Returns the people acronyms in uppercase that starts with the letter \"D\"\n * Type : Unit -> [String]\n * Example : [\"DA\", \"DO\"]\n * \n * TODO:\n * 6. I can get two letters acronyms in uppercase that starts with D\n */\n\n\nfunction peopleAcronymsUppercaseStartWithD() {\n  return filter(map(map(people, function (p) {\n    return p.name.substr(0, 2);\n  }), function (p) {\n    return p.toUpperCase();\n  }), function (p) {\n    return p[0] == 'D';\n  });\n}\n/**\n * Returns the comments for each user by movie\n * Type : Unit -> [{movie, name, grade}]\n * Example : [{name: \"Lord of the Rings\", name: \"Xavier\", grade: 5},{name: \"Empire strikes back\", name: \"Arnaud\", grade: 6}]\n * \n * TODO:\n * 7. I can get all comments for each movie and people\n */\n\n\nfunction commentsByMovie() {\n  return map(movies, function (m) {\n    return map(m.comments, function (c) {\n      return {\n        movie: m.title,\n        name: findPersonById(c.peopleId).name,\n        grade: c.grade\n      };\n    });\n  }).flat();\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "ex2.js"
      ],
      "names": [
        "people",
        "id",
        "name",
        "age",
        "movies",
        "title",
        "author",
        "comments",
        "peopleId",
        "grade",
        "Array",
        "prototype",
        "flat",
        "reduce",
        "acc",
        "v",
        "concat",
        "map",
        "arr",
        "f",
        "tmp",
        "c",
        "push",
        "filter",
        "p",
        "findPersonById",
        "peopleYoungerThan30",
        "peopleAcronyms",
        "substr",
        "peopleAcronymsUppercaseStartWithD",
        "toUpperCase",
        "commentsByMovie",
        "m",
        "movie"
      ],
      "mappings": ";;;;;;;;;;;;AAAA,IAAMA,MAAM,GAAG,CACX;AACIC,EAAAA,EAAE,EAAE,CADR;AAEIC,EAAAA,IAAI,EAAE,QAFV;AAGIC,EAAAA,GAAG,EAAE;AAHT,CADW,EAMX;AACIF,EAAAA,EAAE,EAAE,CADR;AAEIC,EAAAA,IAAI,EAAE,QAFV;AAGIC,EAAAA,GAAG,EAAE;AAHT,CANW,EAWX;AACIF,EAAAA,EAAE,EAAE,CADR;AAEIC,EAAAA,IAAI,EAAE,QAFV;AAGIC,EAAAA,GAAG,EAAE;AAHT,CAXW,EAgBX;AACIF,EAAAA,EAAE,EAAE,CADR;AAEIC,EAAAA,IAAI,EAAE,QAFV;AAGIC,EAAAA,GAAG,EAAG;AAHV,CAhBW,EAqBX;AACIF,EAAAA,EAAE,EAAE,CADR;AAEIC,EAAAA,IAAI,EAAE,QAFV;AAGIC,EAAAA,GAAG,EAAG;AAHV,CArBW,EA0BX;AACIF,EAAAA,EAAE,EAAE,CADR;AAEIC,EAAAA,IAAI,EAAE,WAFV;AAGIC,EAAAA,GAAG,EAAG;AAHV,CA1BW,CAAf;AAiCA,IAAMC,MAAM,GAAG,CACX;AACIC,EAAAA,KAAK,EAAE,mBADX;AAEIC,EAAAA,MAAM,EAAE,eAFZ;AAGIC,EAAAA,QAAQ,EAAE,CAAC;AAACC,IAAAA,QAAQ,EAAE,CAAX;AAAcC,IAAAA,KAAK,EAAE;AAArB,GAAD,EACC;AAACD,IAAAA,QAAQ,EAAE,CAAX;AAAcC,IAAAA,KAAK,EAAE;AAArB,GADD,EAEC;AAACD,IAAAA,QAAQ,EAAE,CAAX;AAAcC,IAAAA,KAAK,EAAE;AAArB,GAFD,EAGC;AAACD,IAAAA,QAAQ,EAAE,CAAX;AAAcC,IAAAA,KAAK,EAAE;AAArB,GAHD;AAHd,CADW,EASX;AACIJ,EAAAA,KAAK,EAAE,yBADX;AAEIC,EAAAA,MAAM,EAAE,kBAFZ;AAGIC,EAAAA,QAAQ,EAAE,CAAC;AAACC,IAAAA,QAAQ,EAAE,CAAX;AAAcC,IAAAA,KAAK,EAAE;AAArB,GAAD,EACC;AAACD,IAAAA,QAAQ,EAAE,CAAX;AAAcC,IAAAA,KAAK,EAAE;AAArB,GADD,EAEC;AAACD,IAAAA,QAAQ,EAAE,CAAX;AAAcC,IAAAA,KAAK,EAAE;AAArB,GAFD,EAGC;AAACD,IAAAA,QAAQ,EAAE,CAAX;AAAcC,IAAAA,KAAK,EAAE;AAArB,GAHD;AAHd,CATW,CAAf;;AAmBAC,KAAK,CAACC,SAAN,CAAgBC,IAAhB,GAAuB,YAAW;AAC9B,SAAO,KAAKC,MAAL,CAAY,UAACC,GAAD,EAAKC,CAAL;AAAA,WAAWD,GAAG,CAACE,MAAJ,CAAWD,CAAX,CAAX;AAAA,GAAZ,EAAqC,EAArC,CAAP;AACH,CAFD;AAIA;;;;;;;;;AAOO,SAASE,GAAT,CAAaC,GAAb,EAAkBC,CAAlB,EAAqB;AACxB,MAAIC,GAAG,GAAG,EAAV;AADwB;AAAA;AAAA;;AAAA;AAExB,yBAAaF,GAAb,8HAAkB;AAAA,UAAVG,CAAU;AACdD,MAAAA,GAAG,CAACE,IAAJ,CAASH,CAAC,CAACE,CAAD,CAAV;AACH;AAJuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKxB,SAAOD,GAAP;AACH;AAID;;;;;;;;;AAOO,SAASG,MAAT,CAAgBL,GAAhB,EAAqBM,CAArB,EAAwB;AAC3B,MAAIJ,GAAG,GAAG,EAAV;AAD2B;AAAA;AAAA;;AAAA;AAE3B,0BAAaF,GAAb,mIAAkB;AAAA,UAAVG,CAAU;;AACd,UAAGG,CAAC,CAACH,CAAD,CAAJ,EAAS;AACLD,QAAAA,GAAG,CAACE,IAAJ,CAASD,CAAT;AACH;AACJ;AAN0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAO3B,SAAOD,GAAP;AACH;AAED;;;;;;;;;AAOO,SAASK,cAAT,CAAwBxB,EAAxB,EAA4B;AAC/B,SAAOsB,MAAM,CAACvB,MAAD,EAAS,UAAAwB,CAAC;AAAA,WAAIA,CAAC,CAACvB,EAAF,KAAOA,EAAX;AAAA,GAAV,CAAN,CAA+B,CAA/B,CAAP;AACH;AAED;;;;;;;;;AAOO,SAASyB,mBAAT,GAA+B;AAClC,SAAOH,MAAM,CAACvB,MAAD,EAAS,UAAAwB,CAAC;AAAA,WAAIA,CAAC,CAACrB,GAAF,GAAQ,EAAZ;AAAA,GAAV,CAAb;AACH;AAED;;;;;;;;;;AAQO,SAASwB,cAAT,GAA0B;AAC7B,SAAOV,GAAG,CAACjB,MAAD,EAAS,UAAAwB,CAAC;AAAA,WAAIA,CAAC,CAACtB,IAAF,CAAO0B,MAAP,CAAc,CAAd,EAAgB,CAAhB,CAAJ;AAAA,GAAV,CAAV;AACH;AAED;;;;;;;;;;AAQO,SAASC,iCAAT,GAA6C;AAChD,SAAON,MAAM,CAACN,GAAG,CAACA,GAAG,CAACjB,MAAD,EAAS,UAAAwB,CAAC;AAAA,WAAIA,CAAC,CAACtB,IAAF,CAAO0B,MAAP,CAAc,CAAd,EAAgB,CAAhB,CAAJ;AAAA,GAAV,CAAJ,EAAuC,UAAAJ,CAAC;AAAA,WAAIA,CAAC,CAACM,WAAF,EAAJ;AAAA,GAAxC,CAAJ,EAAkE,UAAAN,CAAC;AAAA,WAAIA,CAAC,CAAC,CAAD,CAAD,IAAM,GAAV;AAAA,GAAnE,CAAb;AACH;AAED;;;;;;;;;;AAQO,SAASO,eAAT,GAA2B;AAC9B,SAAOd,GAAG,CAACb,MAAD,EAAS,UAAA4B,CAAC;AAAA,WAAIf,GAAG,CAACe,CAAC,CAACzB,QAAH,EAAa,UAAAc,CAAC;AAAA,aAAK;AAACY,QAAAA,KAAK,EAAED,CAAC,CAAC3B,KAAV;AAAiBH,QAAAA,IAAI,EAAEuB,cAAc,CAACJ,CAAC,CAACb,QAAH,CAAd,CAA2BN,IAAlD;AAAwDO,QAAAA,KAAK,EAAEY,CAAC,CAACZ;AAAjE,OAAL;AAAA,KAAd,CAAP;AAAA,GAAV,CAAH,CAAkHG,IAAlH,EAAP;AACH",
      "sourceRoot": "/home/arnaudgeiser/git/workshop-fp/code/partie2",
      "sourcesContent": [
        "const people = [\n    {\n        id: 1,\n        name: \"Arnaud\",\n        age: 29\n    },\n    {\n        id: 2,\n        name: \"Xavier\",\n        age: 22\n    },\n    {\n        id: 3,\n        name: \"Robert\",\n        age: 50\n    },\n    {\n        id: 4,\n        name: \"Damien\",\n        age : 37\n    },\n    {\n        id: 5,\n        name: \"Jerome\",\n        age : 90\n    },\n    {\n        id: 6,\n        name: \"Dominique\",\n        age : 40\n    }\n]\n\nconst movies = [\n    {\n        title: \"Lord of the Rings\",\n        author: \"Peter Jackson\",\n        comments: [{peopleId: 1, grade: 5},\n                   {peopleId: 2, grade: 7},\n                   {peopleId: 3, grade: 4},\n                   {peopleId: 4, grade: 9}]\n    },\n    {\n        title: \"The Empire strikes back\",\n        author: \"Steven Spielberg\",\n        comments: [{peopleId: 1, grade: 2},\n                   {peopleId: 2, grade: 8},\n                   {peopleId: 3, grade: 10},\n                   {peopleId: 4, grade: 7}]\n    },\n]\n\nArray.prototype.flat = function() { \n    return this.reduce((acc,v) => acc.concat(v),[]) \n};\n\n/**\n * Applies a function (f) to each element of an array (arr).\n * Type: [A] => (A => B) => [B]\n * \n * TODO: \n * 1. I can pass an array and a function to apply a transformation via the map() function\n */\nexport function map(arr, f) {\n    let tmp = [];\n    for(let c of arr) {\n        tmp.push(f(c));\n    }\n    return tmp;\n}\n\n\n\n/**\n * Filters the elements of an array (xs) keeping only those who match a given predicate (p).\n * Type: [A] => (A => Boolean) => [A]\n * \n * TODO:\n * 2. I can pass an array and a predicate to filter out items via the filter() function\n */\nexport function filter(arr, p) {\n    let tmp = [];\n    for(let c of arr) {\n        if(p(c)) {\n            tmp.push(c);\n        }\n    }\n    return tmp;\n}\n\n/**\n * Returns a person by its id\n * Type: Int => Person\n * \n * TODO:\n * 3. I can create a function that close over a variable in its environnement, that\\' called a closure!\n */\nexport function findPersonById(id) {\n    return filter(people, p => p.id===id)[0];\n}\n\n/**\n * Returns the people younger than 30\n * Type: Unit => [Person]\n * \n * TODO:\n * 4. I can get people younger than 30'\n */\nexport function peopleYoungerThan30() {\n    return filter(people, p => p.age < 30);\n}\n\n/**\n * Returns the people acronyms\n * Type: Unit => [String]\n * Example: [\"Ar\", \"Xa\", Da\"]\n * \n * TODO:\n * 5. I can get two letters acronyms\n */\nexport function peopleAcronyms() {\n    return map(people, p => p.name.substr(0,2));\n}\n\n/**\n * Returns the people acronyms in uppercase that starts with the letter \"D\"\n * Type : Unit -> [String]\n * Example : [\"DA\", \"DO\"]\n * \n * TODO:\n * 6. I can get two letters acronyms in uppercase that starts with D\n */\nexport function peopleAcronymsUppercaseStartWithD() {\n    return filter(map(map(people, p => p.name.substr(0,2)), p => p.toUpperCase()), p => p[0]=='D');\n}\n\n/**\n * Returns the comments for each user by movie\n * Type : Unit -> [{movie, name, grade}]\n * Example : [{name: \"Lord of the Rings\", name: \"Xavier\", grade: 5},{name: \"Empire strikes back\", name: \"Arnaud\", grade: 6}]\n * \n * TODO:\n * 7. I can get all comments for each movie and people\n */\nexport function commentsByMovie() {\n    return map(movies, m => map(m.comments, c => ({movie: m.title, name: findPersonById(c.peopleId).name, grade: c.grade}))).flat();\n}"
      ]
    },
    "sourceType": "script",
    "mtime": 1559146605474
  }
}